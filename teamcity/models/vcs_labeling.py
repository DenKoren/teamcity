# coding: utf-8

import pprint
import re  # noqa: F401

import six

# from teamcity.models.vcs_roots import VcsRoots  # noqa: F401,E501


class VcsLabeling(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'branch_filter': 'str',
        'label_name': 'str',
        'type': 'str',
        'vcs_roots': 'VcsRoots'
    }

    attribute_map = {
        'branch_filter': 'branchFilter',
        'label_name': 'labelName',
        'type': 'type',
        'vcs_roots': 'vcsRoots'
    }

    def __init__(self, branch_filter=None, label_name=None, type=None, vcs_roots=None):  # noqa: E501
        """VcsLabeling - a model defined in Swagger"""  # noqa: E501

        self._branch_filter = None
        self._label_name = None
        self._type = None
        self._vcs_roots = None
        self.discriminator = None

        if branch_filter is not None:
            self.branch_filter = branch_filter
        if label_name is not None:
            self.label_name = label_name
        if type is not None:
            self.type = type
        if vcs_roots is not None:
            self.vcs_roots = vcs_roots

    @property
    def branch_filter(self):
        """Gets the branch_filter of this VcsLabeling.  # noqa: E501


        :return: The branch_filter of this VcsLabeling.  # noqa: E501
        :rtype: str
        """
        return self._branch_filter

    @branch_filter.setter
    def branch_filter(self, branch_filter):
        """Sets the branch_filter of this VcsLabeling.


        :param branch_filter: The branch_filter of this VcsLabeling.  # noqa: E501
        :type: str
        """

        self._branch_filter = branch_filter

    @property
    def label_name(self):
        """Gets the label_name of this VcsLabeling.  # noqa: E501


        :return: The label_name of this VcsLabeling.  # noqa: E501
        :rtype: str
        """
        return self._label_name

    @label_name.setter
    def label_name(self, label_name):
        """Sets the label_name of this VcsLabeling.


        :param label_name: The label_name of this VcsLabeling.  # noqa: E501
        :type: str
        """

        self._label_name = label_name

    @property
    def type(self):
        """Gets the type of this VcsLabeling.  # noqa: E501


        :return: The type of this VcsLabeling.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VcsLabeling.


        :param type: The type of this VcsLabeling.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def vcs_roots(self):
        """Gets the vcs_roots of this VcsLabeling.  # noqa: E501


        :return: The vcs_roots of this VcsLabeling.  # noqa: E501
        :rtype: VcsRoots
        """
        return self._vcs_roots

    @vcs_roots.setter
    def vcs_roots(self, vcs_roots):
        """Sets the vcs_roots of this VcsLabeling.


        :param vcs_roots: The vcs_roots of this VcsLabeling.  # noqa: E501
        :type: VcsRoots
        """

        self._vcs_roots = vcs_roots

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VcsLabeling):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
