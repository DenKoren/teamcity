# coding: utf-8

import pprint
import re  # noqa: F401

import six

# from teamcity.models.build_type import BuildType  # noqa: F401,E501
# from teamcity.models.build_types import BuildTypes  # noqa: F401,E501
# from teamcity.models.project import Project  # noqa: F401,E501


class ProblemScope(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'build_type': 'BuildType',
        'build_types': 'BuildTypes',
        'project': 'Project'
    }

    attribute_map = {
        'build_type': 'buildType',
        'build_types': 'buildTypes',
        'project': 'project'
    }

    def __init__(self, build_type=None, build_types=None, project=None):  # noqa: E501
        """ProblemScope - a model defined in Swagger"""  # noqa: E501

        self._build_type = None
        self._build_types = None
        self._project = None
        self.discriminator = None

        if build_type is not None:
            self.build_type = build_type
        if build_types is not None:
            self.build_types = build_types
        if project is not None:
            self.project = project

    @property
    def build_type(self):
        """Gets the build_type of this ProblemScope.  # noqa: E501


        :return: The build_type of this ProblemScope.  # noqa: E501
        :rtype: BuildType
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """Sets the build_type of this ProblemScope.


        :param build_type: The build_type of this ProblemScope.  # noqa: E501
        :type: BuildType
        """

        self._build_type = build_type

    @property
    def build_types(self):
        """Gets the build_types of this ProblemScope.  # noqa: E501


        :return: The build_types of this ProblemScope.  # noqa: E501
        :rtype: BuildTypes
        """
        return self._build_types

    @build_types.setter
    def build_types(self, build_types):
        """Sets the build_types of this ProblemScope.


        :param build_types: The build_types of this ProblemScope.  # noqa: E501
        :type: BuildTypes
        """

        self._build_types = build_types

    @property
    def project(self):
        """Gets the project of this ProblemScope.  # noqa: E501


        :return: The project of this ProblemScope.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ProblemScope.


        :param project: The project of this ProblemScope.  # noqa: E501
        :type: Project
        """

        self._project = project

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProblemScope):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
