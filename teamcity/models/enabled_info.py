# coding: utf-8

import pprint
import re  # noqa: F401

import six

# from teamcity.models.comment import Comment  # noqa: F401,E501


class EnabledInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'Comment',
        'status': 'bool',
        'status_switch_time': 'str'
    }

    attribute_map = {
        'comment': 'comment',
        'status': 'status',
        'status_switch_time': 'statusSwitchTime'
    }

    def __init__(self, comment=None, status=False, status_switch_time=None):  # noqa: E501
        """EnabledInfo - a model defined in Swagger"""  # noqa: E501

        self._comment = None
        self._status = None
        self._status_switch_time = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if status is not None:
            self.status = status
        if status_switch_time is not None:
            self.status_switch_time = status_switch_time

    @property
    def comment(self):
        """Gets the comment of this EnabledInfo.  # noqa: E501


        :return: The comment of this EnabledInfo.  # noqa: E501
        :rtype: Comment
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this EnabledInfo.


        :param comment: The comment of this EnabledInfo.  # noqa: E501
        :type: Comment
        """

        self._comment = comment

    @property
    def status(self):
        """Gets the status of this EnabledInfo.  # noqa: E501


        :return: The status of this EnabledInfo.  # noqa: E501
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EnabledInfo.


        :param status: The status of this EnabledInfo.  # noqa: E501
        :type: bool
        """

        self._status = status

    @property
    def status_switch_time(self):
        """Gets the status_switch_time of this EnabledInfo.  # noqa: E501


        :return: The status_switch_time of this EnabledInfo.  # noqa: E501
        :rtype: str
        """
        return self._status_switch_time

    @status_switch_time.setter
    def status_switch_time(self, status_switch_time):
        """Sets the status_switch_time of this EnabledInfo.


        :param status_switch_time: The status_switch_time of this EnabledInfo.  # noqa: E501
        :type: str
        """

        self._status_switch_time = status_switch_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnabledInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
