# coding: utf-8

"""
    TeamCity REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 10.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

# from swagger_client.models.problems import Problems  # noqa: F401,E501
# from swagger_client.models.tests import Tests  # noqa: F401,E501


class ProblemTarget(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'any_problem': 'bool',
        'problems': 'Problems',
        'tests': 'Tests'
    }

    attribute_map = {
        'any_problem': 'anyProblem',
        'problems': 'problems',
        'tests': 'tests'
    }

    def __init__(self, any_problem=False, problems=None, tests=None):  # noqa: E501
        """ProblemTarget - a model defined in Swagger"""  # noqa: E501

        self._any_problem = None
        self._problems = None
        self._tests = None
        self.discriminator = None

        if any_problem is not None:
            self.any_problem = any_problem
        if problems is not None:
            self.problems = problems
        if tests is not None:
            self.tests = tests

    @property
    def any_problem(self):
        """Gets the any_problem of this ProblemTarget.  # noqa: E501


        :return: The any_problem of this ProblemTarget.  # noqa: E501
        :rtype: bool
        """
        return self._any_problem

    @any_problem.setter
    def any_problem(self, any_problem):
        """Sets the any_problem of this ProblemTarget.


        :param any_problem: The any_problem of this ProblemTarget.  # noqa: E501
        :type: bool
        """

        self._any_problem = any_problem

    @property
    def problems(self):
        """Gets the problems of this ProblemTarget.  # noqa: E501


        :return: The problems of this ProblemTarget.  # noqa: E501
        :rtype: Problems
        """
        return self._problems

    @problems.setter
    def problems(self, problems):
        """Sets the problems of this ProblemTarget.


        :param problems: The problems of this ProblemTarget.  # noqa: E501
        :type: Problems
        """

        self._problems = problems

    @property
    def tests(self):
        """Gets the tests of this ProblemTarget.  # noqa: E501


        :return: The tests of this ProblemTarget.  # noqa: E501
        :rtype: Tests
        """
        return self._tests

    @tests.setter
    def tests(self, tests):
        """Sets the tests of this ProblemTarget.


        :param tests: The tests of this ProblemTarget.  # noqa: E501
        :type: Tests
        """

        self._tests = tests

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProblemTarget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProblemTarget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
