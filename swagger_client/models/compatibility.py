# coding: utf-8

"""
    TeamCity REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 10.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.agent import Agent  # noqa: F401,E501
from swagger_client.models.build_type import BuildType  # noqa: F401,E501
from swagger_client.models.requirements import Requirements  # noqa: F401,E501


class Compatibility(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent': 'Agent',
        'build_type': 'BuildType',
        'compatible': 'bool',
        'unmet_requirements': 'Requirements'
    }

    attribute_map = {
        'agent': 'agent',
        'build_type': 'buildType',
        'compatible': 'compatible',
        'unmet_requirements': 'unmetRequirements'
    }

    def __init__(self, agent=None, build_type=None, compatible=False, unmet_requirements=None):  # noqa: E501
        """Compatibility - a model defined in Swagger"""  # noqa: E501

        self._agent = None
        self._build_type = None
        self._compatible = None
        self._unmet_requirements = None
        self.discriminator = None

        if agent is not None:
            self.agent = agent
        if build_type is not None:
            self.build_type = build_type
        if compatible is not None:
            self.compatible = compatible
        if unmet_requirements is not None:
            self.unmet_requirements = unmet_requirements

    @property
    def agent(self):
        """Gets the agent of this Compatibility.  # noqa: E501


        :return: The agent of this Compatibility.  # noqa: E501
        :rtype: Agent
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this Compatibility.


        :param agent: The agent of this Compatibility.  # noqa: E501
        :type: Agent
        """

        self._agent = agent

    @property
    def build_type(self):
        """Gets the build_type of this Compatibility.  # noqa: E501


        :return: The build_type of this Compatibility.  # noqa: E501
        :rtype: BuildType
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """Sets the build_type of this Compatibility.


        :param build_type: The build_type of this Compatibility.  # noqa: E501
        :type: BuildType
        """

        self._build_type = build_type

    @property
    def compatible(self):
        """Gets the compatible of this Compatibility.  # noqa: E501


        :return: The compatible of this Compatibility.  # noqa: E501
        :rtype: bool
        """
        return self._compatible

    @compatible.setter
    def compatible(self, compatible):
        """Sets the compatible of this Compatibility.


        :param compatible: The compatible of this Compatibility.  # noqa: E501
        :type: bool
        """

        self._compatible = compatible

    @property
    def unmet_requirements(self):
        """Gets the unmet_requirements of this Compatibility.  # noqa: E501


        :return: The unmet_requirements of this Compatibility.  # noqa: E501
        :rtype: Requirements
        """
        return self._unmet_requirements

    @unmet_requirements.setter
    def unmet_requirements(self, unmet_requirements):
        """Sets the unmet_requirements of this Compatibility.


        :param unmet_requirements: The unmet_requirements of this Compatibility.  # noqa: E501
        :type: Requirements
        """

        self._unmet_requirements = unmet_requirements

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Compatibility, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Compatibility):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
