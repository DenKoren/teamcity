# coding: utf-8

"""
    TeamCity REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 10.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

# from swagger_client.models.comment import Comment  # noqa: F401,E501
# from swagger_client.models.problem_scope import ProblemScope  # noqa: F401,E501
# from swagger_client.models.problem_target import ProblemTarget  # noqa: F401,E501
# from swagger_client.models.resolution import Resolution  # noqa: F401,E501
# from swagger_client.models.user import User  # noqa: F401,E501


class Investigation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignee': 'User',
        'assignment': 'Comment',
        'href': 'str',
        'id': 'str',
        'resolution': 'Resolution',
        'responsible': 'User',
        'scope': 'ProblemScope',
        'state': 'str',
        'target': 'ProblemTarget'
    }

    attribute_map = {
        'assignee': 'assignee',
        'assignment': 'assignment',
        'href': 'href',
        'id': 'id',
        'resolution': 'resolution',
        'responsible': 'responsible',
        'scope': 'scope',
        'state': 'state',
        'target': 'target'
    }

    def __init__(self, assignee=None, assignment=None, href=None, id=None, resolution=None, responsible=None, scope=None, state=None, target=None):  # noqa: E501
        """Investigation - a model defined in Swagger"""  # noqa: E501

        self._assignee = None
        self._assignment = None
        self._href = None
        self._id = None
        self._resolution = None
        self._responsible = None
        self._scope = None
        self._state = None
        self._target = None
        self.discriminator = None

        if assignee is not None:
            self.assignee = assignee
        if assignment is not None:
            self.assignment = assignment
        if href is not None:
            self.href = href
        if id is not None:
            self.id = id
        if resolution is not None:
            self.resolution = resolution
        if responsible is not None:
            self.responsible = responsible
        if scope is not None:
            self.scope = scope
        if state is not None:
            self.state = state
        if target is not None:
            self.target = target

    @property
    def assignee(self):
        """Gets the assignee of this Investigation.  # noqa: E501


        :return: The assignee of this Investigation.  # noqa: E501
        :rtype: User
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this Investigation.


        :param assignee: The assignee of this Investigation.  # noqa: E501
        :type: User
        """

        self._assignee = assignee

    @property
    def assignment(self):
        """Gets the assignment of this Investigation.  # noqa: E501


        :return: The assignment of this Investigation.  # noqa: E501
        :rtype: Comment
        """
        return self._assignment

    @assignment.setter
    def assignment(self, assignment):
        """Sets the assignment of this Investigation.


        :param assignment: The assignment of this Investigation.  # noqa: E501
        :type: Comment
        """

        self._assignment = assignment

    @property
    def href(self):
        """Gets the href of this Investigation.  # noqa: E501


        :return: The href of this Investigation.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Investigation.


        :param href: The href of this Investigation.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this Investigation.  # noqa: E501


        :return: The id of this Investigation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Investigation.


        :param id: The id of this Investigation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resolution(self):
        """Gets the resolution of this Investigation.  # noqa: E501


        :return: The resolution of this Investigation.  # noqa: E501
        :rtype: Resolution
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Investigation.


        :param resolution: The resolution of this Investigation.  # noqa: E501
        :type: Resolution
        """

        self._resolution = resolution

    @property
    def responsible(self):
        """Gets the responsible of this Investigation.  # noqa: E501


        :return: The responsible of this Investigation.  # noqa: E501
        :rtype: User
        """
        return self._responsible

    @responsible.setter
    def responsible(self, responsible):
        """Sets the responsible of this Investigation.


        :param responsible: The responsible of this Investigation.  # noqa: E501
        :type: User
        """

        self._responsible = responsible

    @property
    def scope(self):
        """Gets the scope of this Investigation.  # noqa: E501


        :return: The scope of this Investigation.  # noqa: E501
        :rtype: ProblemScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Investigation.


        :param scope: The scope of this Investigation.  # noqa: E501
        :type: ProblemScope
        """

        self._scope = scope

    @property
    def state(self):
        """Gets the state of this Investigation.  # noqa: E501


        :return: The state of this Investigation.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Investigation.


        :param state: The state of this Investigation.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def target(self):
        """Gets the target of this Investigation.  # noqa: E501


        :return: The target of this Investigation.  # noqa: E501
        :rtype: ProblemTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Investigation.


        :param target: The target of this Investigation.  # noqa: E501
        :type: ProblemTarget
        """

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Investigation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Investigation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
