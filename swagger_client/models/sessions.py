# coding: utf-8

"""
    TeamCity REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 10.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.session import Session  # noqa: F401,E501


class Sessions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'max_active': 'int',
        'session': 'list[Session]',
        'session_counter': 'int',
        'session_create_rate': 'int',
        'session_expire_rate': 'int',
        'session_max_alive_time': 'int'
    }

    attribute_map = {
        'count': 'count',
        'max_active': 'maxActive',
        'session': 'session',
        'session_counter': 'sessionCounter',
        'session_create_rate': 'sessionCreateRate',
        'session_expire_rate': 'sessionExpireRate',
        'session_max_alive_time': 'sessionMaxAliveTime'
    }

    def __init__(self, count=None, max_active=None, session=None, session_counter=None, session_create_rate=None, session_expire_rate=None, session_max_alive_time=None):  # noqa: E501
        """Sessions - a model defined in Swagger"""  # noqa: E501

        self._count = None
        self._max_active = None
        self._session = None
        self._session_counter = None
        self._session_create_rate = None
        self._session_expire_rate = None
        self._session_max_alive_time = None
        self.discriminator = None

        if count is not None:
            self.count = count
        if max_active is not None:
            self.max_active = max_active
        if session is not None:
            self.session = session
        if session_counter is not None:
            self.session_counter = session_counter
        if session_create_rate is not None:
            self.session_create_rate = session_create_rate
        if session_expire_rate is not None:
            self.session_expire_rate = session_expire_rate
        if session_max_alive_time is not None:
            self.session_max_alive_time = session_max_alive_time

    @property
    def count(self):
        """Gets the count of this Sessions.  # noqa: E501


        :return: The count of this Sessions.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Sessions.


        :param count: The count of this Sessions.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def max_active(self):
        """Gets the max_active of this Sessions.  # noqa: E501


        :return: The max_active of this Sessions.  # noqa: E501
        :rtype: int
        """
        return self._max_active

    @max_active.setter
    def max_active(self, max_active):
        """Sets the max_active of this Sessions.


        :param max_active: The max_active of this Sessions.  # noqa: E501
        :type: int
        """

        self._max_active = max_active

    @property
    def session(self):
        """Gets the session of this Sessions.  # noqa: E501


        :return: The session of this Sessions.  # noqa: E501
        :rtype: list[Session]
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this Sessions.


        :param session: The session of this Sessions.  # noqa: E501
        :type: list[Session]
        """

        self._session = session

    @property
    def session_counter(self):
        """Gets the session_counter of this Sessions.  # noqa: E501


        :return: The session_counter of this Sessions.  # noqa: E501
        :rtype: int
        """
        return self._session_counter

    @session_counter.setter
    def session_counter(self, session_counter):
        """Sets the session_counter of this Sessions.


        :param session_counter: The session_counter of this Sessions.  # noqa: E501
        :type: int
        """

        self._session_counter = session_counter

    @property
    def session_create_rate(self):
        """Gets the session_create_rate of this Sessions.  # noqa: E501


        :return: The session_create_rate of this Sessions.  # noqa: E501
        :rtype: int
        """
        return self._session_create_rate

    @session_create_rate.setter
    def session_create_rate(self, session_create_rate):
        """Sets the session_create_rate of this Sessions.


        :param session_create_rate: The session_create_rate of this Sessions.  # noqa: E501
        :type: int
        """

        self._session_create_rate = session_create_rate

    @property
    def session_expire_rate(self):
        """Gets the session_expire_rate of this Sessions.  # noqa: E501


        :return: The session_expire_rate of this Sessions.  # noqa: E501
        :rtype: int
        """
        return self._session_expire_rate

    @session_expire_rate.setter
    def session_expire_rate(self, session_expire_rate):
        """Sets the session_expire_rate of this Sessions.


        :param session_expire_rate: The session_expire_rate of this Sessions.  # noqa: E501
        :type: int
        """

        self._session_expire_rate = session_expire_rate

    @property
    def session_max_alive_time(self):
        """Gets the session_max_alive_time of this Sessions.  # noqa: E501


        :return: The session_max_alive_time of this Sessions.  # noqa: E501
        :rtype: int
        """
        return self._session_max_alive_time

    @session_max_alive_time.setter
    def session_max_alive_time(self, session_max_alive_time):
        """Sets the session_max_alive_time of this Sessions.


        :param session_max_alive_time: The session_max_alive_time of this Sessions.  # noqa: E501
        :type: int
        """

        self._session_max_alive_time = session_max_alive_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Sessions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sessions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
