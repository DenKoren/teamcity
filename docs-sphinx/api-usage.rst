############################
Getting started with the API
############################

``dohq_teamcity.TeamCity`` class
=======================

To connect to a TeamCity server, create a ``dohq_teamcity.TeamCity`` object:

.. code-block:: python

   import dohq_teamcity

   # username/password authentication
   tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))



Managers
========

The ``dohq_teamcity.TeamCity`` class provides managers (APIs) to access the TeamCity resources.
Each manager provides a set of methods to act on the resources. The available
methods depend on the resource type.

Examples:

.. code-block:: python

   # list all the projects
   projects = tc.projects.get_projects()
   for project in projects:
       print(project)

   # get the group with name = groupname
   group = tc.group.get('name:groupname')
   print(group)
       
   # get the user with name = username
   user = tc.user.get('username:devopshq')
   print(user)

   # create a new user and delete
    from dohq_teamcity import User
    new_user = User(name='New user', username='new_user')
    new_user = tc.users.create_user(body=new_user)
    new_user.delete()

    # other way - create object, connect with exist instance and load it
    import dohq_teamcity
    bt = dohq_teamcity.BuildType(id='MyBuildTypeId', teamcity=tc)
    bt = bt.read()


The attributes of objects are defined upon object creation, and depend on the
TeamCity API itself. To list the available information associated with an object
use the ``attributes`` attribute:

.. code-block:: python

   project = tc.projects.get(1)
   print(project.attribute_map.keys())

If some objects contains other object (eg - ``Project`` contain ``BuildType``) we need execute ``read()`` function to get **full** object, because it does not contain full information about related object and we must reload object.

.. code-block:: python

   # list the build_type properties for a project
   project = tc.projects.get('id:MyProject')
   bt = project.build_types.build_type[0]
   bt.parameters # None
   bt = bt.load()
   bt.parameters # Properties object like list[Property]


TeamCity Objects
==============

You can delete a remote object when it exists locally:

.. code-block:: python

   # delete the resource
   project = tc.projects.get('id:MyProject')
   project.delete()

Some classes provide additional methods, allowing more actions on the TeamCity
resources. For example:

.. code-block:: python

   # Add property to build type
   from dohq_teamcit import Type, ModeProperty
   bt1 = tc.build_types.get('id:MyBuildType')
   tp = Type(raw_value="text display='normal' validationMode='any'")
   pr = ModelProperty(name="from_script", value="testnew", type=tp)
   pr = bt.set_parameter(body=pr)

Base types
==========

The ``dohq_teamcity`` package provides some base types.

* ``dohq_teamcity.TeamCity`` is the primary class, handling the HTTP requests. It holds
  the TeamCity URL and authentication information.
* ``dohq_teamcity.custom.base_model`` is the base class for all the TeamCity objects.
  These objects provide an abstraction for TeamCity resources (projects, groups,
  and so on).
* ``dohq_teamcity.custom.models`` is the extended class for  objects managers,
  providing the API to manipulate the resources and their attributes.
* ``dohq_teamcity.custom.api`` is the extended class for  objects, providing the friendly API to manipulate the resources.
* ``dohq_teamcity.models.*`` autogenerated Models object by swagger.
* ``dohq_teamcity.api.*`` autogenerated objects Managers and APIs by swagger.

.. note::

    Most objects and managers and their functions genereted automatically by https://github.com/swagger-api/swagger-codegen - see more ``swagger.sh`` file and other swagger files.
    Custom interfaces for apis and objects are in folder **dohq_teamcity/custom**

Lazy objects
============

All objects are a ``lazy``-object - it's not make API call on create, only on get\read\update

The following example will only make one API call to the TeamCity server to star
a project (the previous example used 2 API calls):

.. code-block:: python

   # project
   project = tc.projects.get('id:MyProject')  # API call, full object
   project.set_parameter(body=parameter_obj)  # API call

   # project lazy
   from dohq_teamcity import Project
   project = Project(id='MyProject', teamcity=tc) # no API call
   project.set_parameter(body=parameter_obj)  # API call

   # project lazy 2
   from dohq_teamcity import Project
   project = Project(id='MyProject') # no API call
   tc.projects.set_parameter(project, body=parameter_obj)  # API call

Managers function
==========
Many Managers function contains this parameters:

* ``get_*`` and ``serve_*`` function - ``some_locator`` - positional argument, can be string or one ``dohq_teamcity.TeamCityObject`` class.
  TeamCity use https://confluence.jetbrains.com/display/TCD10/REST+API#RESTAPI-Locator for find objects.
* ``set_*`` and ``update_*`` function - ``body`` - named argument, must be one of ``dohq_teamcity.TeamCityObject`` class.
* All function - ``async_req`` - read more below.


Advanced HTTP configuration
===========================

``dohq-teamcity`` relies on ``urllib3`` objects to perform all the
HTTP requests to the TeamCity servers.


Asynchronous request
---------------
All method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass ``async_req=True``.

.. code-block:: python

    thread = tc.builds.get(bt_locator, async_req=True)
    # If the method is called asynchronously, returns the request thread.
    result = thread.get()

.. code-block:: python

   # get all archived projects build types ids
    prs = tc.projects.get_projects(locator='archived:true') #
    hr = [x.read(async_req=True) for x in prs.project[]] # async request
    rs = [x.get() for x in thr]
    bt_ids = list()
    for pr in prs:
        bt_pr = [x.id for x in pr.build_types.build_type]
        bt_ids.extend(bt_pr)
    print('\n'.join(bt_pr))


